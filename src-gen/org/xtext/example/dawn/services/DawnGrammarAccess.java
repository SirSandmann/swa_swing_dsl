/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.dawn.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DawnGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWindowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWindowWindowParserRuleCall_0_0 = (RuleCall)cWindowAssignment_0.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsComponentParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		
		//Model:
		//	window+=Window*
		//	components+=Component*;
		@Override public ParserRule getRule() { return rule; }
		
		//window+=Window* components+=Component*
		public Group getGroup() { return cGroup; }
		
		//window+=Window*
		public Assignment getWindowAssignment_0() { return cWindowAssignment_0; }
		
		//Window
		public RuleCall getWindowWindowParserRuleCall_0_0() { return cWindowWindowParserRuleCall_0_0; }
		
		//components+=Component*
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_1_0() { return cComponentsComponentParserRuleCall_1_0; }
	}
	public class WindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.Window");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWindowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAttributesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAttributesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAttributesWindowAttributesParserRuleCall_7_0 = (RuleCall)cAttributesAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cContainingKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cContainerAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cContainerContainerParserRuleCall_10_0 = (RuleCall)cContainerAssignment_10.eContents().get(0);
		
		//Window:
		//	'create' 'new' 'window' name=ID 'with' 'attributes' '(' attributes=WindowAttributes ')' 'containing'
		//	container=Container;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'new' 'window' name=ID 'with' 'attributes' '(' attributes=WindowAttributes ')' 'containing' container=Container
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
		
		//'window'
		public Keyword getWindowKeyword_2() { return cWindowKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//'attributes'
		public Keyword getAttributesKeyword_5() { return cAttributesKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//attributes=WindowAttributes
		public Assignment getAttributesAssignment_7() { return cAttributesAssignment_7; }
		
		//WindowAttributes
		public RuleCall getAttributesWindowAttributesParserRuleCall_7_0() { return cAttributesWindowAttributesParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//'containing'
		public Keyword getContainingKeyword_9() { return cContainingKeyword_9; }
		
		//container=Container
		public Assignment getContainerAssignment_10() { return cContainerAssignment_10; }
		
		//Container
		public RuleCall getContainerContainerParserRuleCall_10_0() { return cContainerContainerParserRuleCall_10_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSingleChoiceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextLabelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPasswordFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// *insert all possible Java-Swing controls here:
		// * we just implemented the for our scenario necessary control elements* / Component:
		//	Button | TextField | SingleChoice | TextLabel | PasswordField;
		@Override public ParserRule getRule() { return rule; }
		
		//Button | TextField | SingleChoice | TextLabel | PasswordField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Button
		public RuleCall getButtonParserRuleCall_0() { return cButtonParserRuleCall_0; }
		
		//TextField
		public RuleCall getTextFieldParserRuleCall_1() { return cTextFieldParserRuleCall_1; }
		
		//SingleChoice
		public RuleCall getSingleChoiceParserRuleCall_2() { return cSingleChoiceParserRuleCall_2; }
		
		//TextLabel
		public RuleCall getTextLabelParserRuleCall_3() { return cTextLabelParserRuleCall_3; }
		
		//PasswordField
		public RuleCall getPasswordFieldParserRuleCall_4() { return cPasswordFieldParserRuleCall_4; }
	}
	public class WindowAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.WindowAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTextTextAttributeParserRuleCall_0_0_0 = (RuleCall)cTextAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeSizeAttributeParserRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		
		//WindowAttributes:
		//	(text=TextAttribute ',')? size=SizeAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//(text=TextAttribute ',')? size=SizeAttribute
		public Group getGroup() { return cGroup; }
		
		//(text=TextAttribute ',')?
		public Group getGroup_0() { return cGroup_0; }
		
		//text=TextAttribute
		public Assignment getTextAssignment_0_0() { return cTextAssignment_0_0; }
		
		//TextAttribute
		public RuleCall getTextTextAttributeParserRuleCall_0_0_0() { return cTextTextAttributeParserRuleCall_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//size=SizeAttribute
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//SizeAttribute
		public RuleCall getSizeSizeAttributeParserRuleCall_1_0() { return cSizeSizeAttributeParserRuleCall_1_0; }
	}
	public class TextAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.TextAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//TextAttribute:
		//	'name' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'name' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class SizeAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.SizeAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHavingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeightINTTerminalRuleCall_3_0 = (RuleCall)cHeightAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWidthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWidthINTTerminalRuleCall_5_0 = (RuleCall)cWidthAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SizeAttribute:
		//	'having' 'size' '[' height=INT ',' width=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'having' 'size' '[' height=INT ',' width=INT ']'
		public Group getGroup() { return cGroup; }
		
		//'having'
		public Keyword getHavingKeyword_0() { return cHavingKeyword_0; }
		
		//'size'
		public Keyword getSizeKeyword_1() { return cSizeKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//height=INT
		public Assignment getHeightAssignment_3() { return cHeightAssignment_3; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_3_0() { return cHeightINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//width=INT
		public Assignment getWidthAssignment_5() { return cWidthAssignment_5; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_5_0() { return cWidthINTTerminalRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Container:
		//	':' '|' elements+=Element+ '|';
		@Override public ParserRule getRule() { return rule; }
		
		//':' '|' elements+=Element+ '|'
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
		
		//elements+=Element+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentComponentParserRuleCall_0_0 = (RuleCall)cComponentAssignment_0.eContents().get(0);
		private final Assignment cPositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPositionPositionAttributeParserRuleCall_1_0 = (RuleCall)cPositionAssignment_1.eContents().get(0);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeSizeAttributeParserRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Element:
		//	component=Component position=PositionAttribute size=SizeAttribute? '|';
		@Override public ParserRule getRule() { return rule; }
		
		//component=Component position=PositionAttribute size=SizeAttribute? '|'
		public Group getGroup() { return cGroup; }
		
		//component=Component
		public Assignment getComponentAssignment_0() { return cComponentAssignment_0; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_0_0() { return cComponentComponentParserRuleCall_0_0; }
		
		//position=PositionAttribute
		public Assignment getPositionAssignment_1() { return cPositionAssignment_1; }
		
		//PositionAttribute
		public RuleCall getPositionPositionAttributeParserRuleCall_1_0() { return cPositionPositionAttributeParserRuleCall_1_0; }
		
		//size=SizeAttribute?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//SizeAttribute
		public RuleCall getSizeSizeAttributeParserRuleCall_2_0() { return cSizeSizeAttributeParserRuleCall_2_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
	}
	public class PositionAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.PositionAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPositionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXINTTerminalRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYINTTerminalRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PositionAttribute:
		//	'at' 'position' '[' x+=INT+ ',' y+=INT+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'at' 'position' '[' x+=INT+ ',' y+=INT+ ']'
		public Group getGroup() { return cGroup; }
		
		//'at'
		public Keyword getAtKeyword_0() { return cAtKeyword_0; }
		
		//'position'
		public Keyword getPositionKeyword_1() { return cPositionKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//x+=INT+
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_3_0() { return cXINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//y+=INT+
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_5_0() { return cYINTTerminalRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cButtonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cAttributesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributesButtonAttributesParserRuleCall_6_0 = (RuleCall)cAttributesAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Button:
		//	'new' 'button' '=' name=ID 'attributes' '(' attributes=ButtonAttributes ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'new' 'button' '=' name=ID 'attributes' '(' attributes=ButtonAttributes ')'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//'button'
		public Keyword getButtonKeyword_1() { return cButtonKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'attributes'
		public Keyword getAttributesKeyword_4() { return cAttributesKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//attributes=ButtonAttributes
		public Assignment getAttributesAssignment_6() { return cAttributesAssignment_6; }
		
		//ButtonAttributes
		public RuleCall getAttributesButtonAttributesParserRuleCall_6_0() { return cAttributesButtonAttributesParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ButtonAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.ButtonAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTextTextAttributeParserRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodCallParserRuleCall_2_0 = (RuleCall)cMethodAssignment_2.eContents().get(0);
		
		//ButtonAttributes:
		//	text=TextAttribute ',' method=Call;
		@Override public ParserRule getRule() { return rule; }
		
		//text=TextAttribute ',' method=Call
		public Group getGroup() { return cGroup; }
		
		//text=TextAttribute
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }
		
		//TextAttribute
		public RuleCall getTextTextAttributeParserRuleCall_0_0() { return cTextTextAttributeParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//method=Call
		public Assignment getMethodAssignment_2() { return cMethodAssignment_2; }
		
		//Call
		public RuleCall getMethodCallParserRuleCall_2_0() { return cMethodCallParserRuleCall_2_0; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Call Window:
		//	'function:' name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//'function:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'function:'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.TextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTextFieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cAttributesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTextTextAttributeParserRuleCall_6_0 = (RuleCall)cTextAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TextField:
		//	'new' 'text-field' '=' name=ID 'attributes' '(' text=TextAttribute ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'new' 'text-field' '=' name=ID 'attributes' '(' text=TextAttribute ')'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//'text-field'
		public Keyword getTextFieldKeyword_1() { return cTextFieldKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'attributes'
		public Keyword getAttributesKeyword_4() { return cAttributesKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//text=TextAttribute
		public Assignment getTextAssignment_6() { return cTextAssignment_6; }
		
		//TextAttribute
		public RuleCall getTextTextAttributeParserRuleCall_6_0() { return cTextTextAttributeParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class TextLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.TextLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTextLabelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cAttributesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTextTextAttributeParserRuleCall_6_0 = (RuleCall)cTextAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TextLabel:
		//	'new' 'text-label' '=' name=ID 'attributes' '(' text=TextAttribute ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'new' 'text-label' '=' name=ID 'attributes' '(' text=TextAttribute ')'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//'text-label'
		public Keyword getTextLabelKeyword_1() { return cTextLabelKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'attributes'
		public Keyword getAttributesKeyword_4() { return cAttributesKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//text=TextAttribute
		public Assignment getTextAssignment_6() { return cTextAssignment_6; }
		
		//TextAttribute
		public RuleCall getTextTextAttributeParserRuleCall_6_0() { return cTextTextAttributeParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class PasswordFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.PasswordField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPasswordFieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cAttributesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTextTextAttributeParserRuleCall_6_0 = (RuleCall)cTextAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PasswordField:
		//	'new' 'password-field' '=' name=ID 'attributes' '(' text=TextAttribute ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'new' 'password-field' '=' name=ID 'attributes' '(' text=TextAttribute ')'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//'password-field'
		public Keyword getPasswordFieldKeyword_1() { return cPasswordFieldKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'attributes'
		public Keyword getAttributesKeyword_4() { return cAttributesKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//text=TextAttribute
		public Assignment getTextAssignment_6() { return cTextAssignment_6; }
		
		//TextAttribute
		public RuleCall getTextTextAttributeParserRuleCall_6_0() { return cTextTextAttributeParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class SingleChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.SingleChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cChoiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cAttributesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributesSingleChoiceAttributesParserRuleCall_6_0 = (RuleCall)cAttributesAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SingleChoice:
		//	'new' 'choice' '=' name=ID 'attributes' '(' attributes=SingleChoiceAttributes ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'new' 'choice' '=' name=ID 'attributes' '(' attributes=SingleChoiceAttributes ')'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//'choice'
		public Keyword getChoiceKeyword_1() { return cChoiceKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'attributes'
		public Keyword getAttributesKeyword_4() { return cAttributesKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//attributes=SingleChoiceAttributes
		public Assignment getAttributesAssignment_6() { return cAttributesAssignment_6; }
		
		//SingleChoiceAttributes
		public RuleCall getAttributesSingleChoiceAttributesParserRuleCall_6_0() { return cAttributesSingleChoiceAttributesParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class SingleChoiceAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.SingleChoiceAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTextTextAttributeParserRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cOptionsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cComponentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cComponentsSingleChoiceOptionsParserRuleCall_1_2_0 = (RuleCall)cComponentsAssignment_1_2.eContents().get(0);
		
		//SingleChoiceAttributes:
		//	text=TextAttribute (',' 'options' components+=SingleChoiceOptions)+;
		@Override public ParserRule getRule() { return rule; }
		
		//text=TextAttribute (',' 'options' components+=SingleChoiceOptions)+
		public Group getGroup() { return cGroup; }
		
		//text=TextAttribute
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }
		
		//TextAttribute
		public RuleCall getTextTextAttributeParserRuleCall_0_0() { return cTextTextAttributeParserRuleCall_0_0; }
		
		//(',' 'options' components+=SingleChoiceOptions)+
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//'options'
		public Keyword getOptionsKeyword_1_1() { return cOptionsKeyword_1_1; }
		
		//components+=SingleChoiceOptions
		public Assignment getComponentsAssignment_1_2() { return cComponentsAssignment_1_2; }
		
		//SingleChoiceOptions
		public RuleCall getComponentsSingleChoiceOptionsParserRuleCall_1_2_0() { return cComponentsSingleChoiceOptionsParserRuleCall_1_2_0; }
	}
	public class SingleChoiceOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dawn.Dawn.SingleChoiceOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLabelsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextTextAttributeParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		
		//SingleChoiceOptions:
		//	'()' name=ID 'labels' text=TextAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//'()' name=ID 'labels' text=TextAttribute
		public Group getGroup() { return cGroup; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_0() { return cLeftParenthesisRightParenthesisKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'labels'
		public Keyword getLabelsKeyword_2() { return cLabelsKeyword_2; }
		
		//text=TextAttribute
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }
		
		//TextAttribute
		public RuleCall getTextTextAttributeParserRuleCall_3_0() { return cTextTextAttributeParserRuleCall_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final WindowElements pWindow;
	private final ComponentElements pComponent;
	private final WindowAttributesElements pWindowAttributes;
	private final TextAttributeElements pTextAttribute;
	private final SizeAttributeElements pSizeAttribute;
	private final ContainerElements pContainer;
	private final ElementElements pElement;
	private final PositionAttributeElements pPositionAttribute;
	private final ButtonElements pButton;
	private final ButtonAttributesElements pButtonAttributes;
	private final CallElements pCall;
	private final TextFieldElements pTextField;
	private final TextLabelElements pTextLabel;
	private final PasswordFieldElements pPasswordField;
	private final SingleChoiceElements pSingleChoice;
	private final SingleChoiceAttributesElements pSingleChoiceAttributes;
	private final SingleChoiceOptionsElements pSingleChoiceOptions;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DawnGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pWindow = new WindowElements();
		this.pComponent = new ComponentElements();
		this.pWindowAttributes = new WindowAttributesElements();
		this.pTextAttribute = new TextAttributeElements();
		this.pSizeAttribute = new SizeAttributeElements();
		this.pContainer = new ContainerElements();
		this.pElement = new ElementElements();
		this.pPositionAttribute = new PositionAttributeElements();
		this.pButton = new ButtonElements();
		this.pButtonAttributes = new ButtonAttributesElements();
		this.pCall = new CallElements();
		this.pTextField = new TextFieldElements();
		this.pTextLabel = new TextLabelElements();
		this.pPasswordField = new PasswordFieldElements();
		this.pSingleChoice = new SingleChoiceElements();
		this.pSingleChoiceAttributes = new SingleChoiceAttributesElements();
		this.pSingleChoiceOptions = new SingleChoiceOptionsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.dawn.Dawn".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	window+=Window*
	//	components+=Component*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Window:
	//	'create' 'new' 'window' name=ID 'with' 'attributes' '(' attributes=WindowAttributes ')' 'containing'
	//	container=Container;
	public WindowElements getWindowAccess() {
		return pWindow;
	}
	
	public ParserRule getWindowRule() {
		return getWindowAccess().getRule();
	}
	
	/// *insert all possible Java-Swing controls here:
	// * we just implemented the for our scenario necessary control elements* / Component:
	//	Button | TextField | SingleChoice | TextLabel | PasswordField;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//WindowAttributes:
	//	(text=TextAttribute ',')? size=SizeAttribute;
	public WindowAttributesElements getWindowAttributesAccess() {
		return pWindowAttributes;
	}
	
	public ParserRule getWindowAttributesRule() {
		return getWindowAttributesAccess().getRule();
	}
	
	//TextAttribute:
	//	'name' text=STRING;
	public TextAttributeElements getTextAttributeAccess() {
		return pTextAttribute;
	}
	
	public ParserRule getTextAttributeRule() {
		return getTextAttributeAccess().getRule();
	}
	
	//SizeAttribute:
	//	'having' 'size' '[' height=INT ',' width=INT ']';
	public SizeAttributeElements getSizeAttributeAccess() {
		return pSizeAttribute;
	}
	
	public ParserRule getSizeAttributeRule() {
		return getSizeAttributeAccess().getRule();
	}
	
	//Container:
	//	':' '|' elements+=Element+ '|';
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//Element:
	//	component=Component position=PositionAttribute size=SizeAttribute? '|';
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//PositionAttribute:
	//	'at' 'position' '[' x+=INT+ ',' y+=INT+ ']';
	public PositionAttributeElements getPositionAttributeAccess() {
		return pPositionAttribute;
	}
	
	public ParserRule getPositionAttributeRule() {
		return getPositionAttributeAccess().getRule();
	}
	
	//Button:
	//	'new' 'button' '=' name=ID 'attributes' '(' attributes=ButtonAttributes ')';
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//ButtonAttributes:
	//	text=TextAttribute ',' method=Call;
	public ButtonAttributesElements getButtonAttributesAccess() {
		return pButtonAttributes;
	}
	
	public ParserRule getButtonAttributesRule() {
		return getButtonAttributesAccess().getRule();
	}
	
	//Call Window:
	//	'function:' name=ID
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//TextField:
	//	'new' 'text-field' '=' name=ID 'attributes' '(' text=TextAttribute ')';
	public TextFieldElements getTextFieldAccess() {
		return pTextField;
	}
	
	public ParserRule getTextFieldRule() {
		return getTextFieldAccess().getRule();
	}
	
	//TextLabel:
	//	'new' 'text-label' '=' name=ID 'attributes' '(' text=TextAttribute ')';
	public TextLabelElements getTextLabelAccess() {
		return pTextLabel;
	}
	
	public ParserRule getTextLabelRule() {
		return getTextLabelAccess().getRule();
	}
	
	//PasswordField:
	//	'new' 'password-field' '=' name=ID 'attributes' '(' text=TextAttribute ')';
	public PasswordFieldElements getPasswordFieldAccess() {
		return pPasswordField;
	}
	
	public ParserRule getPasswordFieldRule() {
		return getPasswordFieldAccess().getRule();
	}
	
	//SingleChoice:
	//	'new' 'choice' '=' name=ID 'attributes' '(' attributes=SingleChoiceAttributes ')';
	public SingleChoiceElements getSingleChoiceAccess() {
		return pSingleChoice;
	}
	
	public ParserRule getSingleChoiceRule() {
		return getSingleChoiceAccess().getRule();
	}
	
	//SingleChoiceAttributes:
	//	text=TextAttribute (',' 'options' components+=SingleChoiceOptions)+;
	public SingleChoiceAttributesElements getSingleChoiceAttributesAccess() {
		return pSingleChoiceAttributes;
	}
	
	public ParserRule getSingleChoiceAttributesRule() {
		return getSingleChoiceAttributesAccess().getRule();
	}
	
	//SingleChoiceOptions:
	//	'()' name=ID 'labels' text=TextAttribute;
	public SingleChoiceOptionsElements getSingleChoiceOptionsAccess() {
		return pSingleChoiceOptions;
	}
	
	public ParserRule getSingleChoiceOptionsRule() {
		return getSingleChoiceOptionsAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
