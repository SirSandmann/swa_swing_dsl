/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.dawn.dawn.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.example.dawn.dawn.DawnPackage;
import org.xtext.example.dawn.dawn.PositionAttribute;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Position Attribute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.dawn.dawn.impl.PositionAttributeImpl#getX <em>X</em>}</li>
 *   <li>{@link org.xtext.example.dawn.dawn.impl.PositionAttributeImpl#getY <em>Y</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PositionAttributeImpl extends MinimalEObjectImpl.Container implements PositionAttribute
{
  /**
   * The cached value of the '{@link #getX() <em>X</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX()
   * @generated
   * @ordered
   */
  protected EList<Integer> x;

  /**
   * The cached value of the '{@link #getY() <em>Y</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getY()
   * @generated
   * @ordered
   */
  protected EList<Integer> y;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PositionAttributeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DawnPackage.Literals.POSITION_ATTRIBUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Integer> getX()
  {
    if (x == null)
    {
      x = new EDataTypeEList<Integer>(Integer.class, this, DawnPackage.POSITION_ATTRIBUTE__X);
    }
    return x;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Integer> getY()
  {
    if (y == null)
    {
      y = new EDataTypeEList<Integer>(Integer.class, this, DawnPackage.POSITION_ATTRIBUTE__Y);
    }
    return y;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DawnPackage.POSITION_ATTRIBUTE__X:
        return getX();
      case DawnPackage.POSITION_ATTRIBUTE__Y:
        return getY();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DawnPackage.POSITION_ATTRIBUTE__X:
        getX().clear();
        getX().addAll((Collection<? extends Integer>)newValue);
        return;
      case DawnPackage.POSITION_ATTRIBUTE__Y:
        getY().clear();
        getY().addAll((Collection<? extends Integer>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DawnPackage.POSITION_ATTRIBUTE__X:
        getX().clear();
        return;
      case DawnPackage.POSITION_ATTRIBUTE__Y:
        getY().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DawnPackage.POSITION_ATTRIBUTE__X:
        return x != null && !x.isEmpty();
      case DawnPackage.POSITION_ATTRIBUTE__Y:
        return y != null && !y.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (x: ");
    result.append(x);
    result.append(", y: ");
    result.append(y);
    result.append(')');
    return result.toString();
  }

} //PositionAttributeImpl
