/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.dawn.dawn.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.dawn.dawn.DawnPackage;
import org.xtext.example.dawn.dawn.GapAttribute;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gap Attribute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.dawn.dawn.impl.GapAttributeImpl#getGapWidth <em>Gap Width</em>}</li>
 *   <li>{@link org.xtext.example.dawn.dawn.impl.GapAttributeImpl#getGapHeight <em>Gap Height</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GapAttributeImpl extends MinimalEObjectImpl.Container implements GapAttribute
{
  /**
   * The default value of the '{@link #getGapWidth() <em>Gap Width</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGapWidth()
   * @generated
   * @ordered
   */
  protected static final int GAP_WIDTH_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getGapWidth() <em>Gap Width</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGapWidth()
   * @generated
   * @ordered
   */
  protected int gapWidth = GAP_WIDTH_EDEFAULT;

  /**
   * The default value of the '{@link #getGapHeight() <em>Gap Height</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGapHeight()
   * @generated
   * @ordered
   */
  protected static final int GAP_HEIGHT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getGapHeight() <em>Gap Height</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGapHeight()
   * @generated
   * @ordered
   */
  protected int gapHeight = GAP_HEIGHT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GapAttributeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DawnPackage.Literals.GAP_ATTRIBUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getGapWidth()
  {
    return gapWidth;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGapWidth(int newGapWidth)
  {
    int oldGapWidth = gapWidth;
    gapWidth = newGapWidth;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DawnPackage.GAP_ATTRIBUTE__GAP_WIDTH, oldGapWidth, gapWidth));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getGapHeight()
  {
    return gapHeight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGapHeight(int newGapHeight)
  {
    int oldGapHeight = gapHeight;
    gapHeight = newGapHeight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DawnPackage.GAP_ATTRIBUTE__GAP_HEIGHT, oldGapHeight, gapHeight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DawnPackage.GAP_ATTRIBUTE__GAP_WIDTH:
        return getGapWidth();
      case DawnPackage.GAP_ATTRIBUTE__GAP_HEIGHT:
        return getGapHeight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DawnPackage.GAP_ATTRIBUTE__GAP_WIDTH:
        setGapWidth((Integer)newValue);
        return;
      case DawnPackage.GAP_ATTRIBUTE__GAP_HEIGHT:
        setGapHeight((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DawnPackage.GAP_ATTRIBUTE__GAP_WIDTH:
        setGapWidth(GAP_WIDTH_EDEFAULT);
        return;
      case DawnPackage.GAP_ATTRIBUTE__GAP_HEIGHT:
        setGapHeight(GAP_HEIGHT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DawnPackage.GAP_ATTRIBUTE__GAP_WIDTH:
        return gapWidth != GAP_WIDTH_EDEFAULT;
      case DawnPackage.GAP_ATTRIBUTE__GAP_HEIGHT:
        return gapHeight != GAP_HEIGHT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (gapWidth: ");
    result.append(gapWidth);
    result.append(", gapHeight: ");
    result.append(gapHeight);
    result.append(')');
    return result.toString();
  }

} //GapAttributeImpl
